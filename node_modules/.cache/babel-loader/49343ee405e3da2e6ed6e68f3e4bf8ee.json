{"ast":null,"code":"import _defineProperty from \"/home/micessien/Documents/PROJECT/REACT/React-Custom-Hooks-Form-Validation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/micessien/Documents/PROJECT/REACT/React-Custom-Hooks-Form-Validation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/micessien/Documents/PROJECT/REACT/React-Custom-Hooks-Form-Validation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\n\nvar useForm = function useForm(callback, validate, formValues) {\n  console.log(formValues);\n\n  var _useState = useState({\n    email: \"\",\n    password: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      values = _useState2[0],\n      setValues = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errors = _useState4[0],\n      setErrors = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isSubmitting = _useState6[0],\n      setIsSubmitting = _useState6[1];\n\n  var handleChange = function handleChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setValues(_objectSpread({}, values, _defineProperty({}, name, value)));\n  };\n\n  var handleSubmit = function handleSubmit(event) {\n    event.preventDefault();\n    setErrors(validate(values));\n    setIsSubmitting(true);\n  };\n\n  useEffect(function () {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n  return {\n    handleChange: handleChange,\n    handleSubmit: handleSubmit,\n    values: values,\n    errors: errors\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["/home/micessien/Documents/PROJECT/REACT/React-Custom-Hooks-Form-Validation/src/useForm.js"],"names":["useState","useEffect","useForm","callback","validate","formValues","console","log","email","password","values","setValues","errors","setErrors","isSubmitting","setIsSubmitting","handleChange","event","target","name","value","handleSubmit","preventDefault","Object","keys","length"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,QAAD,EAAWC,QAAX,EAAqBC,UAArB,EAAoC;AAClDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;;AADkD,kBAEtBL,QAAQ,CAAC;AAAEQ,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,QAAQ,EAAE;AAAvB,GAAD,CAFc;AAAA;AAAA,MAE3CC,MAF2C;AAAA,MAEnCC,SAFmC;;AAAA,mBAGtBX,QAAQ,CAAC,EAAD,CAHc;AAAA;AAAA,MAG3CY,MAH2C;AAAA,MAGnCC,SAHmC;;AAAA,mBAIVb,QAAQ,CAAC,KAAD,CAJE;AAAA;AAAA,MAI3Cc,YAJ2C;AAAA,MAI7BC,eAJ6B;;AAMlD,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAAA,wBACJA,KAAK,CAACC,MADF;AAAA,QACpBC,IADoB,iBACpBA,IADoB;AAAA,QACdC,KADc,iBACdA,KADc;AAE5BT,IAAAA,SAAS,mBACJD,MADI,sBAENS,IAFM,EAECC,KAFD,GAAT;AAID,GAND;;AAQA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAJ,KAAK,EAAI;AAC5BA,IAAAA,KAAK,CAACK,cAAN;AACAT,IAAAA,SAAS,CAACT,QAAQ,CAACM,MAAD,CAAT,CAAT;AACAK,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAJD;;AAMAd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIsB,MAAM,CAACC,IAAP,CAAYZ,MAAZ,EAAoBa,MAApB,KAA+B,CAA/B,IAAoCX,YAAxC,EAAsD;AACpDX,MAAAA,QAAQ;AACT;AACF,GAJQ,EAIN,CAACS,MAAD,CAJM,CAAT;AAMA,SAAO;AACLI,IAAAA,YAAY,EAAZA,YADK;AAELK,IAAAA,YAAY,EAAZA,YAFK;AAGLX,IAAAA,MAAM,EAANA,MAHK;AAILE,IAAAA,MAAM,EAANA;AAJK,GAAP;AAMD,CAhCD;;AAkCA,eAAeV,OAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useForm = (callback, validate, formValues) => {\n  console.log(formValues)\n  const [values, setValues] = useState({ email: \"\", password: \"\" });\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setErrors(validate(values));\n    setIsSubmitting(true);\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors\n  };\n};\n\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}